/***************************************************************************************************
 * Copyright (c) 2003, 2004 IBM Corporation and others. All rights reserved. This program and the
 * accompanying materials are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors: IBM Corporation - initial API and implementation
 **************************************************************************************************/
package org.eclipse.ui.tests.navigator;

import junit.framework.Assert;
import junit.framework.TestCase;

import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.TreeItem;
import org.eclipse.ui.IViewPart;
import org.eclipse.ui.IWorkbenchPage;
import org.eclipse.ui.IWorkbenchWindow;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.navigator.CommonViewer;

public class OpenTest extends TestCase {

	public static final String COMMON_NAVIGATOR_INSTANCE_ID= "org.eclipse.ui.examples.navigator.example1";

	public void testOpenNavigator() throws Exception {
		EditorTestHelper.showView(COMMON_NAVIGATOR_INSTANCE_ID, true);

		IWorkbenchWindow activeWindow= PlatformUI.getWorkbench().getActiveWorkbenchWindow();
		IWorkbenchPage activePage= activeWindow.getActivePage();
		Display display= activeWindow.getShell().getDisplay();

		IViewPart commonNavigator= activePage.findView(COMMON_NAVIGATOR_INSTANCE_ID);
		commonNavigator.setFocus();
		CommonViewer viewer= (CommonViewer) commonNavigator.getAdapter(CommonViewer.class);
		TreeItem[] items= viewer.getTree().getItems();
				
		assertTrue("There should be some items.", items.length > 0);
		
		viewer.setSelection(new StructuredSelection(items[0].getData()));
		
//		Rectangle bounds= items[0].getBounds();
//		Event mouseClick= new Event();
//		mouseClick.type= SWT.MouseDown;
//		mouseClick.button = SWT.BUTTON1;
//		mouseClick.x= bounds.x + 2;
//		mouseClick.y= bounds.y + 2;
//
//		Event mouseUnclick= new Event();
//		mouseUnclick.type= SWT.MouseUp;
//		mouseUnclick.button = SWT.BUTTON1;
//		mouseUnclick.x= bounds.x + 2;
//		mouseUnclick.y= bounds.y + 2;
//		
//				
//		//display.post(doubleClick);
//		postEvent(items[0].getDisplay(), mouseClick);
//		postEvent(items[0].getDisplay(), mouseUnclick);
//		postEvent(items[0].getDisplay(), mouseClick);
//		postEvent(items[0].getDisplay(), mouseUnclick);
		
	//		Display localDisplay = items[0].getDisplay();
	//		SWTEventHelper.keyCharEvent(localDisplay, 0, SWT.CR, true);
	//		
	//		DisplayHelper.runEventLoop(display, 1000);
	//		
	//		
	//		assertTrue("The first item should be expanded.", items[0].getExpanded());
 
	}
	

	public void testNavigatorRootContents() throws Exception {
		EditorTestHelper.showView(COMMON_NAVIGATOR_INSTANCE_ID, true);

		IWorkbenchWindow activeWindow= PlatformUI.getWorkbench().getActiveWorkbenchWindow();
		IWorkbenchPage activePage= activeWindow.getActivePage();
		Display display= activeWindow.getShell().getDisplay();

		IViewPart commonNavigator= activePage.findView(COMMON_NAVIGATOR_INSTANCE_ID);
		commonNavigator.setFocus();
		CommonViewer viewer= (CommonViewer) commonNavigator.getAdapter(CommonViewer.class);
		TreeItem[] items= viewer.getTree().getItems();
				
		assertTrue("There should be some items.", items.length > 0);
		
		viewer.setSelection(new StructuredSelection(items[0].getData()));
		 
		IProject test = ResourcesPlugin.getWorkspace().getRoot().getProject("Test");
		assertEquals(test, items[0].getData());	 
	}
	

	private static void postEvent(final Display display, final Event event) {
		DisplayHelper helper= new DisplayHelper() {
			public boolean condition() {
				return display.post(event);
			}
		};
		Assert.assertTrue(helper.waitForCondition(display, 1000));			
	}
}
