<?xml version='1.0' encoding='UTF-8'?>
<!-- Schema file written by PDE -->
<schema targetNamespace="org.eclipse.ui.navigator">
<annotation>
      <appInfo>
         <meta.schema plugin="org.eclipse.ui.navigator" id="viewer" name="Common Viewer Configuration"/>
      </appInfo>
      <documentation>
         &apos;viewer&apos; defines attributes for a common viewer. The extension
may provide a custom popup menu id, override whether the viewer provides link with
editor support, provides a filter dialog, and/or provides an &apos;available extensions&apos; 
dialog.

&apos;viewerContentBinding&apos; binds defined content extensions (through the navigatorContent 
extension point) to viewers (defined through the 
org.eclipse.ui.views extension point). Any content 
extension bound to a viewer is described as &apos;visible&apos;. A
content service (org.eclipse.ui.navigator.INavigatorContentService)
will not return any extensions which are not visible for
its viewer id.

&lt;strong&gt;EXPERIMENTAL&lt;/strong&gt;. This class or interface has been added as
part of a work in progress. There is a guarantee neither that this API will
work nor that it will remain the same. Please do not use this API without
consulting with the Platform/UI team.
      </documentation>
   </annotation>

   <element name="extension">
      <complexType>
         <sequence>
            <element ref="viewer" minOccurs="0" maxOccurs="1"/>
            <element ref="viewerContentBinding" minOccurs="0" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="point" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
               <appInfo>
                  <meta.attribute translatable="true"/>
               </appInfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="viewer">
      <annotation>
         <appInfo>
            <meta.element labelAttribute="id"/>
         </appInfo>
         <documentation>
            Provides basic configuration to establish the characteristics
of a viewer. Clients must also define an org.eclipse.ui.views
extension to create the view part.
         </documentation>
      </annotation>
      <complexType>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  The id that matches the id provides in an org.eclipse.ui.views extension.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="popupMenuId" type="string">
            <annotation>
               <documentation>
                  The popupMenuId of the defined viewer. If not specified, the
popupMenuId defaults to the id of the viewer.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="viewerContentBinding">
      <annotation>
         <documentation>
            When a viewer comes up, the default behavior is to select all 
  content extensions that have a triggerPoints expression that 
  matches the input element (provided through the workbench page). 
  
  Clients may override this behavior to select which content 
  extensions which extensions are available to the viewer. 
  Clients may define an &apos;includes&apos; element
  to select which extensions are visible to the viewer, and 
  similarly an &apos;excludes&apos; element 
  for extensions that should not be made visible to the 
  viewer. Clients may further define the extensions that
  should be explicitly queried for root elements (through
  ITreeContentProvider.getElements()). If one or more 
  &apos;contentExtension&apos; elements with &apos;isRoot&apos; set to 
  true are defined within the &apos;includes&apos; statement, 
  only those extensions will be queried for root elements. 
  The &apos;isRoot&apos; has no effect for exclusions.
  
  A viewer may have multiple viewerContentBindings 
  defined, and their includes/excludes statements will be 
  aggregated to produce the final behavior. The last 
  viewerContentBinding to be read will set the popupMenuId.
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <element ref="includes" minOccurs="0" maxOccurs="1"/>
            <element ref="excludes" minOccurs="0" maxOccurs="1"/>
         </sequence>
         <attribute name="viewerId" type="string" use="required">
            <annotation>
               <documentation>
                  There should be a corresponding org.eclipse.ui.views extension that corresponds to this Id. That extension should specify an instance of org.eclipse.ui.navigator.CommonNavigator.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="includes">
      <annotation>
         <documentation>
            Define a set of patterns that should be included when 
            looking for content extensions for the viewer that 
            matches the viewerId attribute. When the includes 
            and excludes statements intersect, the includes 
            statement will be given precedence.
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <element ref="contentExtension" minOccurs="1" maxOccurs="unbounded"/>
         </sequence>
      </complexType>
   </element>

   <element name="excludes">
      <annotation>
         <documentation>
            Define a set of patterns that should be excluded when 
            looking for content extensions for the viewer that 
            matches the viewerId attribute. When the includes 
            and excludes statements intersect, the includes 
            statement will be given precedence.
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <element ref="contentExtension" minOccurs="1" maxOccurs="unbounded"/>
         </sequence>
      </complexType>
   </element>

   <element name="contentExtension">
      <annotation>
         <documentation>
            Indicates that the content extension should be queried by getElements() 
            for the root of the viewer. Selecting root extensions using 
            &apos;isRoot&apos; will override the extensions 
            which would otherwise be enabled for the viewer input element. 
              
            See the documentation for &apos;viewerContentBinding&apos; for more information.
         </documentation>
      </annotation>
      <complexType>
         <attribute name="pattern" type="string" use="required">
            <annotation>
               <documentation>
                  Content extensions may be selected exactly by using 
                  their content extension id. Clients may also use a 
                  regular expression pattern to select any content 
                  extensions that have ids that match the pattern. 
                  Patterns are regular expressions which match 
                  unique identifiers. Please see the Java 
                  documentation for java.util.regex.Pattern
                  for further details.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="isRoot" type="boolean">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <annotation>
      <appInfo>
         <meta.section type="since"/>
      </appInfo>
      <documentation>
         3.2
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="examples"/>
      </appInfo>
      <documentation>
         The following example configures the popup menu id for a viewer. 
      
&lt;p&gt;
&lt;pre&gt;
&lt;viewer 
   id=&quot;org.eclipse.testViewer&quot; 
   popupMenuId=&quot;org.eclipse.testViewer#PopupMenu&quot;/&gt;
&lt;/pre&gt;
&lt;/p&gt;


         
The following example declares that one content extension 
(id: org.eclipse.ui.navigator.resourceContent) is bound
to a viewer matching the id &apos;org.eclipse.ui.navigator.resourceContent&apos;. 
Further, any id that begins with &apos;org.eclipse.ui.navigator.tests&apos;
will be ignored. 

&lt;p&gt;
&lt;pre&gt;
   &lt;extension
         point=&quot;org.eclipse.ui.navigator.viewerContentBinding&quot;&gt;
       &lt;viewerContentBinding 
             viewerId=&quot;org.eclipse.ui.navigator.resourceContent&quot;&gt;
            &lt;includes&gt;
                &lt;contentExtension pattern=&quot;org.eclipse.ui.navigator.resourceContent&quot; /&gt;
            &lt;/includes&gt;
            &lt;excludes&gt;
                &lt;contentExtension pattern=&quot;org.eclipse.ui.navigator.tests.*&quot; /&gt;
            &lt;/excludes&gt;
       &lt;/viewerContentBinding&gt;
   &lt;/extension&gt;

&lt;/pre&gt;
&lt;/p&gt;
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="apiInfo"/>
      </appInfo>
      <documentation>
         
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="implementation"/>
      </appInfo>
      <documentation>
         
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="copyright"/>
      </appInfo>
      <documentation>
         Copyright (c) 2002, 2005 IBM Corporation and others.&lt;br&gt;
All rights reserved. This program and the accompanying materials are made
available under the terms of the Eclipse Public License v1.0 which accompanies
this distribution, and is available at &lt;a 
href=&quot;http://www.eclipse.org/legal/epl-v10.html&quot;&gt;http://www.eclipse.org/legal/epl-v10.html&lt;/a&gt;
      </documentation>
   </annotation>

</schema>
