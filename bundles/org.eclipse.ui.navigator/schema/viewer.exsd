<?xml version='1.0' encoding='UTF-8'?>
<!-- Schema file written by PDE -->
<schema targetNamespace="org.eclipse.ui.navigator">
<annotation>
      <appInfo>
         <meta.schema plugin="org.eclipse.ui.navigator" id="viewer" name="Common Viewer Configuration"/>
      </appInfo>
      <documentation>
         &apos;viewer&apos; defines attributes for a common viewer. The extension
may provide a custom popup menu id, override whether the viewer provides link with
editor support, provides a filter dialog, and/or provides an &apos;available extensions&apos; 
dialog.

&apos;viewerContentBinding&apos; binds defined content extensions (through the navigatorContent 
extension point) to viewers (defined through the 
org.eclipse.ui.views extension point). Any content 
extension bound to a viewer is described as &apos;visible&apos;. A
content service (org.eclipse.ui.navigator.INavigatorContentService)
will not return any extensions which are not visible for
its viewer id.

&lt;strong&gt;EXPERIMENTAL&lt;/strong&gt;. This class or interface has been added as
part of a work in progress. There is a guarantee neither that this API will
work nor that it will remain the same. Please do not use this API without
consulting with the Platform/UI team.
      </documentation>
   </annotation>

   <element name="extension">
      <complexType>
         <sequence>
            <element ref="viewer" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="viewerContentBinding" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="viewerActionBinding" minOccurs="0" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="point" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
               <appInfo>
                  <meta.attribute translatable="true"/>
               </appInfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="viewer">
      <annotation>
         <appInfo>
            <meta.element labelAttribute="id"/>
         </appInfo>
         <documentation>
            Provides basic configuration to establish the characteristics
of a viewer. Clients must also define an org.eclipse.ui.views
extension to create the view part.
         </documentation>
      </annotation>
      <complexType>
         <attribute name="viewerId" type="string" use="required">
            <annotation>
               <documentation>
                  The id that matches the id provides in an org.eclipse.ui.views extension.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="popupMenuId" type="string">
            <annotation>
               <documentation>
                  The popupMenuId of the defined viewer. If not specified, the
popupMenuId defaults to the id of the viewer.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="viewerContentBinding">
      <annotation>
         <documentation>
            Clients must define one or more &apos;viwerContentBinding&apos; elements to describe which content extensions are &apos;visible&apos; to the viewer. A content extension is &apos;visible&apos; if the id of the content extension matches an &apos;includes&apos; statement under a viewerContentBinding and is not excluded by an &apos;excludes&apos; statement. If a content extension is not &apos;visible&apos; to a viewer, then the extension will never be asked for content by a content service for that viewer. 
  
Clients may define an &apos;includes&apos; element to select which extensions are visible to the viewer, and similarly an &apos;excludes&apos; element for extensions that should not be made visible to the viewer. Clients may further define the extensions that should be explicitly queried for root elements (through  ITreeContentProvider.getElements()) by the &apos;isRoot&apos; attribute. If one or more &apos;contentExtension&apos; elements have &apos;isRoot&apos; set to true within the &apos;includes&apos; statement, only those extensions will be queried for root elements. The &apos;isRoot&apos; attribute has no effect for exclusions.
  
A viewer may have multiple viewerContentBindings defined, and their includes/excludes statements will be aggregated to produce the final behavior.
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <element ref="includes" minOccurs="0" maxOccurs="1"/>
            <element ref="excludes" minOccurs="0" maxOccurs="1"/>
         </sequence>
         <attribute name="viewerId" type="string" use="required">
            <annotation>
               <documentation>
                  There should be a corresponding org.eclipse.ui.views extension that corresponds to this Id. That extension should specify an instance of org.eclipse.ui.navigator.CommonNavigator.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="viewerActionBinding">
      <annotation>
         <documentation>
            Clients must define which action providers are visible to their viewer. Clients may define an &apos;includes&apos; element to select which extensions are visible to the viewer, and  similarly an &apos;excludes&apos; element for extensions that should not be made visible to the viewer. 
  
A viewer may have multiple viewerActionBindings defined, and their includes/excludes statements will be aggregated to produce the final behavior.
  
For &apos;actionProvider&apos; definitions which are not nested under a &apos;navigatorContent&apos; definition, clients may specify a custom id. If clients do not specify an id, the id defaults to &apos;org.eclipse.ui.navigator.actionProvider&apos;. For clients that wish to pick up actionProviders with no specific id, clients must define a &apos;viewerActionBinding&apos; for the default id. See the examples section for how this is done.
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <element ref="includes" minOccurs="0" maxOccurs="1"/>
            <element ref="excludes" minOccurs="0" maxOccurs="1"/>
         </sequence>
         <attribute name="viewerId" type="string" use="required">
            <annotation>
               <documentation>
                  There should be a corresponding org.eclipse.ui.views extension that corresponds to this Id. That extension should specify an instance of org.eclipse.ui.navigator.CommonNavigator.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="includes">
      <annotation>
         <documentation>
            Define a set of patterns that should be included when 
            looking for content extensions for the viewer that 
            matches the viewerId attribute. When the includes 
            and excludes statements intersect, the includes 
            statement will be given precedence.
         </documentation>
      </annotation>
      <complexType>
         <choice>
            <sequence>
               <element ref="contentExtension" minOccurs="1" maxOccurs="unbounded"/>
            </sequence>
            <sequence>
               <element ref="actionExtension" minOccurs="1" maxOccurs="unbounded"/>
            </sequence>
         </choice>
      </complexType>
   </element>

   <element name="excludes">
      <annotation>
         <documentation>
            Define a set of patterns that should be excluded when 
            looking for content extensions for the viewer that 
            matches the viewerId attribute. When the includes 
            and excludes statements intersect, the includes 
            statement will be given precedence.
         </documentation>
      </annotation>
      <complexType>
         <choice>
            <sequence>
               <element ref="contentExtension" minOccurs="1" maxOccurs="unbounded"/>
            </sequence>
            <sequence>
               <element ref="actionExtension" minOccurs="1" maxOccurs="unbounded"/>
            </sequence>
         </choice>
      </complexType>
   </element>

   <element name="contentExtension">
      <annotation>
         <documentation>
            Indicates that the content extension should be queried by getElements() or getChildren()
for the root of the viewer. 

Clients may specify &apos;isRoot&apos; to select specific root extensions to override 
the extensions which would otherwise be enabled for the viewer input element
(based on the matching &apos;triggerPoints&apos; expression for the viewer input element). 
              
See the documentation for &apos;viewerContentBinding&apos; for more information.
         </documentation>
      </annotation>
      <complexType>
         <attribute name="pattern" type="string" use="required">
            <annotation>
               <documentation>
                  Content extensions may be selected exactly by using 
                  their content extension id. Clients may also use a 
                  regular expression pattern to select any content 
                  extensions that have ids that match the pattern. 
                  Patterns are regular expressions which match 
                  unique identifiers. Please see the Java 
                  documentation for java.util.regex.Pattern
                  for further details.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="isRoot" type="boolean">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="actionExtension">
      <annotation>
         <documentation>
            Indicates that the action extension that should be given opportunities
to contribute to the context menu and action bars. 

              
See the documentation for &apos;viewerActionBinding&apos; for more information.
         </documentation>
      </annotation>
      <complexType>
         <attribute name="pattern" type="string" use="required">
            <annotation>
               <documentation>
                  Content extensions may be selected exactly by using 
                  their content extension id. Clients may also use a 
                  regular expression pattern to select any content 
                  extensions that have ids that match the pattern. 
                  Patterns are regular expressions which match 
                  unique identifiers. Please see the Java 
                  documentation for java.util.regex.Pattern
                  for further details.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <annotation>
      <appInfo>
         <meta.section type="since"/>
      </appInfo>
      <documentation>
         3.2
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="examples"/>
      </appInfo>
      <documentation>
         The following example configures the popup menu id for a viewer. 
      
&lt;p&gt;
&lt;pre&gt;

   &lt;extension
         point=&quot;org.eclipse.ui.navigator.viewer&quot;&gt;
      &lt;viewer 
         id=&quot;org.eclipse.testViewer&quot; 
         popupMenuId=&quot;org.eclipse.testViewer#PopupMenu&quot;/&gt;
   &lt;/extension&gt;
&lt;/pre&gt;
&lt;/p&gt;

 
The following example declares that one content extension 
(id: org.eclipse.ui.navigator.resourceContent) is bound
to a viewer matching the id &apos;org.eclipse.ui.navigator.resourceContent&apos;. 
Further, any id that begins with &apos;org.eclipse.ui.navigator.tests&apos;
will be ignored. 

&lt;p&gt;
&lt;pre&gt;
   &lt;extension
         point=&quot;org.eclipse.ui.navigator.viewer&quot;&gt;
       &lt;viewerContentBinding 
             viewerId=&quot;org.eclipse.ui.navigator.resourceContent&quot;&gt;
            &lt;includes&gt;
                &lt;contentExtension pattern=&quot;org.eclipse.ui.navigator.resourceContent&quot; /&gt;
            &lt;/includes&gt;
            &lt;excludes&gt;
                &lt;contentExtension pattern=&quot;org.eclipse.ui.navigator.tests.*&quot; /&gt;
            &lt;/excludes&gt;
       &lt;/viewerContentBinding&gt;
   &lt;/extension&gt; 
&lt;/pre&gt;
&lt;/p&gt;

The following example declares a &apos;viewerActionBinding&apos; for all actionProviders (not 
nested under a navigatorContent extension) that match the regular expression
&quot;org.acme.actions.*&quot; but not &quot;org.acme.actions.tests.*&quot;. This expression 
will make any actionProvider whose id begins with &quot;org.acme.actions.&quot; but not &quot;org.acme.actions.tests.&quot; visible to the viewer with the id &quot;org.acme.viewer&quot;.
Of course, the &apos;viewerActionBindings&apos; only apply to &apos;actionProvider&apos; elements that 
are not nested under a &apos;navigatorContent&apos; element. The visibility of nested 
&apos;actionProvider&apos; elements is controlled by &apos;viewerContentBindings&apos; for the enclosing
&apos;navigatorContent&apos; element.
&lt;p&gt;
&lt;pre&gt;
   &lt;extension
         point=&quot;org.eclipse.ui.navigator.viewer&quot;&gt;
       &lt;viewerActionBinding 
             viewerId=&quot;org.acme.viewer&quot;&gt;
            &lt;includes&gt;
                &lt;contentExtension pattern=&quot;org.acme.actions.*&quot; /&gt;
            &lt;/includes&gt;
            &lt;excludes&gt;
                &lt;contentExtension pattern=&quot;org.acme.actions.tests.*&quot; /&gt;
            &lt;/excludes&gt;
       &lt;/viewerActionBinding&gt;
   &lt;/extension&gt; 
&lt;/pre&gt;
&lt;/p&gt;

The following example makes any actionProvider with no &apos;id&apos; attribute visible
to the viewer &apos;org.acme.viewer&apos;. The actionProviders with no &apos;id&apos; attribute
have a default id of &quot;org.eclipse.ui.navigator.actionProvider&quot;. Of course,
the &apos;viewerActionBindings&apos; only apply to &apos;actionProvider&apos; elements that 
are not nested under a &apos;navigatorContent&apos; element. The visibility of nested 
&apos;actionProvider&apos; elements is controlled by &apos;viewerContentBindings&apos; for the enclosing
&apos;navigatorContent&apos; element.

&lt;p&gt;
&lt;pre&gt;
   &lt;extension
         point=&quot;org.eclipse.ui.navigator.viewer&quot;&gt;
       &lt;viewerActionBinding 
             viewerId=&quot;org.acme.viewer&quot;&gt;
            &lt;includes&gt;
                &lt;contentExtension pattern=&quot;org.eclipse.ui.navigator.actionProvider&quot; /&gt;
            &lt;/includes&gt; 
       &lt;/viewerActionBinding&gt;
   &lt;/extension&gt; 
&lt;/pre&gt;
&lt;/p&gt;
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="apiInfo"/>
      </appInfo>
      <documentation>
         
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="implementation"/>
      </appInfo>
      <documentation>
         
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="copyright"/>
      </appInfo>
      <documentation>
         Copyright (c) 2002, 2005 IBM Corporation and others.&lt;br&gt;
All rights reserved. This program and the accompanying materials are made
available under the terms of the Eclipse Public License v1.0 which accompanies
this distribution, and is available at &lt;a 
href=&quot;http://www.eclipse.org/legal/epl-v10.html&quot;&gt;http://www.eclipse.org/legal/epl-v10.html&lt;/a&gt;
      </documentation>
   </annotation>

</schema>
